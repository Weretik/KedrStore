@using Application.Catalog.GetCategories
@using Application.Catalog.ImportCatalogFromXml
@inject ICatalogStore CatalogStore
@inject ISnackbar Snackbar

<MudPaper Class="pa-4 mb-4">
    <MudText Typo="Typo.h4" class="mt-5 mb-3 ml-5">
        Категорії
    </MudText>

    @if (_isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
    }
    else
    {
        <MudTreeView T="ImportCategoryDto"
                     Items="@_items"
                     SelectedValue="@_selected"
                     SelectedValueChanged="OnSelectedChanged"
                     Hover="true"
                     Dense="true"
                     ExpandOnClick="true">
            <ItemTemplate>
                <MudTreeViewItem Value="@context.Value"
                                 Text="@context.Text"
                                 Items="@context.Children" />
            </ItemTemplate>
        </MudTreeView>
    }

</MudPaper>

@code {
    private IReadOnlyCollection<TreeItemData<ImportCategoryDto>> _items = [];
    private ImportCategoryDto? _selected;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var res = await Mediator.Send(new GetCategoriesQuery());
            if (!res.IsSuccess || res.Value is null) return;

            var roots = res.Value.Where(c => c.ParentCategoryId is null);
            _items = Build(roots);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private static IReadOnlyCollection<TreeItemData<ImportCategoryDto>> Build(IEnumerable<ImportCategoryDto> src)
        => src.Select(Map).ToList();

    private static TreeItemData<ImportCategoryDto> Map(ImportCategoryDto c)
        => new()
        {
            Text = c.Name,
            Value = c,
            Children = c.Children is { Count: > 0 }
                ? c.Children.Select(Map).ToList()
                : null
        };

    private void OnSelectedChanged(ImportCategoryDto? node)
    {
        if (node?.Children is { Count: > 0 })
        {
            _selected = null;

            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
            Snackbar.Add("Виберіть кінцеву категорію.", Severity.Info,
                c => c.SnackbarVariant = Variant.Outlined);
            return;
        }

        _selected = node;
        CatalogStore.SetCategoryId(node?.Id);

    }

}
